{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<ul> <li> Basics Introduction</li> <li> Notes for simple reference</li> <li> DB Related</li> <li> Flask Specific Topics ... </li> </ul>"},{"location":"DB-Migrations/","title":"DB Migrations","text":"<p>Yes, Flask has equivalents for Laravel migrations and seeders, typically provided by Flask-Migrate (for database migrations) and custom scripts or tools for seeding. Flask-Migrate integrates well with SQLAlchemy, which is a powerful ORM for Python, much like Laravel's Eloquent.</p>"},{"location":"DB-Migrations/#1-database-migrations-flask-migrate","title":"1. Database Migrations: Flask-Migrate","text":"<p>Flask-Migrate is a wrapper for Alembic, a database migration tool, and works seamlessly with Flask-SQLAlchemy.</p>"},{"location":"DB-Migrations/#setup-flask-migrate","title":"Setup Flask-Migrate","text":"<ol> <li> <p>Install Flask-Migrate:    <pre><code>pip install flask-migrate\n</code></pre></p> </li> <li> <p>Initialize Flask-Migrate:    Add it to your Flask application:    <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://username:password@localhost/db_name'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n</code></pre></p> </li> <li> <p>Create a Migrations Folder:    Run this command to initialize migrations:    <pre><code>flask db init\n</code></pre></p> </li> <li> <p>Generate a Migration:    After defining or modifying your models, create a migration script:    <pre><code>flask db migrate -m \"Initial migration\"\n</code></pre></p> </li> <li> <p>Apply the Migration:    Apply changes to the database:    <pre><code>flask db upgrade\n</code></pre></p> </li> <li> <p>Example Migration:    The generated migration file will include the schema changes:    <pre><code>def upgrade():\n    op.create_table(\n        'users',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('username', sa.String(length=100), nullable=False),\n        sa.Column('password_hash', sa.String(length=255), nullable=False),\n        sa.PrimaryKeyConstraint('id')\n    )\n</code></pre></p> </li> </ol>"},{"location":"DB-Migrations/#2-database-seeding","title":"2. Database Seeding","text":"<p>Flask doesn't have a built-in seeding system, but you can use custom Python scripts or libraries like Faker for generating seed data.</p>"},{"location":"DB-Migrations/#option-1-manual-seeder-script","title":"Option 1: Manual Seeder Script","text":"<p>Create a script to insert data into your database: <pre><code>from app import db\nfrom app.models import User  # Import your models\n\ndef seed_users():\n    user1 = User(username=\"user1\", password_hash=\"hashed_pass1\")\n    user2 = User(username=\"user2\", password_hash=\"hashed_pass2\")\n    db.session.add(user1)\n    db.session.add(user2)\n    db.session.commit()\n\nif __name__ == \"__main__\":\n    seed_users()\n</code></pre> Run the script with: <pre><code>python seed_users.py\n</code></pre></p>"},{"location":"DB-Migrations/#option-2-using-faker","title":"Option 2: Using Faker","text":"<p>The Faker library can generate realistic dummy data: <pre><code>pip install faker\n</code></pre> Example script: <pre><code>from faker import Faker\nfrom app import db\nfrom app.models import User\n\nfake = Faker()\n\ndef seed_users():\n    for _ in range(10):\n        user = User(username=fake.user_name(), password_hash=\"hashed_password\")\n        db.session.add(user)\n    db.session.commit()\n\nif __name__ == \"__main__\":\n    seed_users()\n</code></pre></p>"},{"location":"DB-Migrations/#3-automate-with-flask-script-optional","title":"3. Automate with Flask-Script (Optional)","text":"<p>You can use Flask-Script to combine migrations and seeders into a unified command-line interface, but this approach is less common in newer Flask apps since Flask CLI is sufficient.</p>"},{"location":"category/","title":"Category","text":""},{"location":"category/#implementation-plan","title":"Implementation Plan","text":""},{"location":"category/#1-backend-with-flask","title":"1. Backend with Flask","text":"<ul> <li>Create an endpoint (<code>/recipes</code>) to fetch recipes filtered by selected categories. This endpoint can return JSON data.</li> <li>Example Flask route:   <pre><code>from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/recipes', methods=['GET'])\ndef get_recipes():\n    selected_categories = request.args.getlist('categories')  # List of selected category IDs\n    # Query database for recipes matching these categories\n    if selected_categories:\n        recipes = Recipe.query.filter(Recipe.category_id.in_(selected_categories)).all()\n    else:\n        recipes = []\n    # Convert to JSON-friendly format\n    recipes_data = [{\"id\": r.id, \"name\": r.name, \"category_id\": r.category_id} for r in recipes]\n    return jsonify(recipes_data)\n</code></pre></li> </ul>"},{"location":"category/#2-frontend-with-alpinejs","title":"2. Frontend with Alpine.js","text":"<ul> <li>Use Alpine.js for interactivity.</li> <li>Example HTML structure:   <pre><code>&lt;div x-data=\"recipeFilter()\"&gt;\n  &lt;button @click=\"toggleFilter()\"&gt;Search/Show&lt;/button&gt;\n\n  &lt;!-- Filter Section --&gt;\n  &lt;div x-show=\"showFilters\" class=\"filters\"&gt;\n    &lt;template x-for=\"category in categories\" :key=\"category.id\"&gt;\n      &lt;label&gt;\n        &lt;input type=\"checkbox\" :value=\"category.id\" @change=\"toggleCategory(category.id)\" /&gt;\n        &lt;span x-text=\"category.name\"&gt;&lt;/span&gt;\n      &lt;/label&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Recipes Section --&gt;\n  &lt;div class=\"recipes\"&gt;\n    &lt;template x-for=\"recipe in recipes\" :key=\"recipe.id\"&gt;\n      &lt;div class=\"recipe\"&gt;\n        &lt;h3 x-text=\"recipe.name\"&gt;&lt;/h3&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></li> </ul>"},{"location":"category/#3-alpinejs-script","title":"3. Alpine.js Script","text":"<ul> <li>Define the <code>recipeFilter</code> Alpine.js component:   <pre><code>&lt;script&gt;\n  function recipeFilter() {\n    return {\n      showFilters: false,\n      categories: [], // Load this dynamically if needed\n      selectedCategories: [],\n      recipes: [],\n      toggleFilter() {\n        this.showFilters = !this.showFilters;\n      },\n      toggleCategory(categoryId) {\n        if (this.selectedCategories.includes(categoryId)) {\n          this.selectedCategories = this.selectedCategories.filter(id =&gt; id !== categoryId);\n        } else {\n          this.selectedCategories.push(categoryId);\n        }\n        this.loadRecipes();\n      },\n      loadRecipes() {\n        fetch(`/recipes?categories=${this.selectedCategories.join(',')}`)\n          .then(response =&gt; response.json())\n          .then(data =&gt; {\n            this.recipes = data;\n          });\n      }\n    };\n  }\n&lt;/script&gt;\n</code></pre></li> </ul>"},{"location":"category/#how-it-works","title":"How It Works","text":"<ol> <li>Search/Show Button: Toggles the filter section visibility (<code>x-show=\"showFilters\"</code>).</li> <li>Check Categories: When a checkbox is clicked, it updates the <code>selectedCategories</code> array and fetches recipes via the <code>/recipes</code> endpoint.</li> <li>Dynamic Recipes: Recipes are dynamically loaded and displayed as checkboxes are checked or unchecked.</li> </ol>"},{"location":"category/#advantages","title":"Advantages","text":"<ul> <li>Dynamic and Interactive: Leveraging Alpine.js ensures minimal JavaScript and a smooth UI/UX.</li> <li>Scalable Backend: Flask handles the database query and returns results efficiently.</li> <li>Decoupled Logic: The backend focuses on data, and the frontend handles interactivity.</li> </ul>"},{"location":"database/","title":"Database","text":""},{"location":"database/#proposed-database-schema","title":"Proposed Database Schema","text":""},{"location":"database/#1-recipes-table","title":"1. Recipes Table","text":"<p>Holds basic information about each recipe. <pre><code>CREATE TABLE recipes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    notes TEXT,\n    image VARCHAR(255), -- Main or default image\n    author VARCHAR(100),\n    serves INT, -- Number of people the recipe serves\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n</code></pre></p>"},{"location":"database/#2-images-table","title":"2. Images Table","text":"<p>Stores additional images associated with a recipe. <pre><code>CREATE TABLE images (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    recipe_id INT NOT NULL,\n    image_url VARCHAR(255) NOT NULL,\n    image_description VARCHAR(255), -- Description for context\n    image_order_number INT, -- Order of images\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE\n);\n</code></pre></p>"},{"location":"database/#3-instructions-table","title":"3. Instructions Table","text":"<p>Manages instructions as ordered steps for each recipe. <pre><code>CREATE TABLE instructions (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    recipe_id INT NOT NULL,\n    instruction_order INT NOT NULL, -- Order of the step\n    instruction_step TEXT NOT NULL, -- The actual instruction\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE\n);\n</code></pre></p>"},{"location":"database/#4-ingredients-table","title":"4. Ingredients Table","text":"<p>Stores ingredients for recipes. <pre><code>CREATE TABLE ingredients (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    recipe_id INT NOT NULL,\n    ingredient_detail VARCHAR(255) NOT NULL, -- \"a pinch of salt\", \"3 large eggs\"\n    FOREIGN KEY (recipe_id) REFERENCES recipes(id) ON DELETE CASCADE\n);\n</code></pre></p>"},{"location":"database/#5-users-table-optional","title":"5. Users Table (Optional)","text":"<p>If you decide to add user management later: <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(100) NOT NULL UNIQUE,\n    password_hash VARCHAR(255) NOT NULL,\n    email VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> To add a <code>categories</code> table and link it to the <code>recipes</code> table, we can use a foreign key relationship. Here\u2019s how we can amend the database structure:</p>"},{"location":"database/#updated-database-schema","title":"Updated Database Schema","text":""},{"location":"database/#1-categories-table","title":"1. Categories Table","text":"<p>This table will store the categories: <pre><code>CREATE TABLE categories (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL UNIQUE\n);\n</code></pre></p>"},{"location":"database/#2-modify-recipes-table","title":"2. Modify Recipes Table","text":"<p>Add a foreign key to link a recipe to a category: <pre><code>ALTER TABLE recipes ADD COLUMN category_id INT, ADD FOREIGN KEY (category_id) REFERENCES categories(id);\n</code></pre></p>"},{"location":"database/#relationship-details","title":"Relationship Details","text":"<ol> <li>One-to-Many Relationship:</li> <li>Each category can have multiple recipes.</li> <li> <p>Each recipe belongs to a single category (optional, as some recipes may not fit a category initially).</p> </li> <li> <p>Default Behavior:</p> </li> <li>Set <code>category_id</code> as nullable (<code>NULL</code>) for recipes that don\u2019t belong to a category.</li> </ol>"},{"location":"database/#seeding-categories","title":"Seeding Categories","text":"<p>Use a seeder script to populate categories: <pre><code>from app import db\nfrom app.models import Category\n\ndef seed_categories():\n    categories = [\"Desserts\", \"Main Courses\", \"Appetizers\", \"Drinks\", \"Snacks\"]\n    for category_name in categories:\n        category = Category(name=category_name)\n        db.session.add(category)\n    db.session.commit()\n\nif __name__ == \"__main__\":\n    seed_categories()\n</code></pre></p>"},{"location":"database/#using-categories-in-queries","title":"Using Categories in Queries","text":"<ol> <li> <p>Query Recipes by Category:    <pre><code>category = Category.query.filter_by(name=\"Desserts\").first()\nrecipes = Recipe.query.filter_by(category_id=category.id).all()\n</code></pre></p> </li> <li> <p>Include Category in Recipe Forms:    Add a dropdown to select the category when creating or editing a recipe.</p> </li> </ol>"},{"location":"database/#database-structure","title":"Database Structure","text":"<pre><code>erDiagram\n    USERS {\n        INT id\n        VARCHAR username\n        VARCHAR password_hash\n        VARCHAR email\n        TIMESTAMP created_at\n    }\n\n    RECIPES {\n        INT id\n        VARCHAR name\n        TEXT notes\n        VARCHAR image\n        VARCHAR author\n        INT category_id\n        INT serves\n        BOOLEAN is_favorite\n    }\n\n    IMAGES {\n        INT id\n        INT recipe_id\n        VARCHAR image\n        VARCHAR image_description\n        INT image_order_number\n    }\n\n    INSTRUCTIONS {\n        INT id\n        INT recipe_id\n        INT instruction_id\n        INT instruction_order\n        TEXT instruction_step\n    }\n\n    INGREDIENTS {\n        INT id\n        INT recipe_id\n        TEXT quantity\n        VARCHAR ingredient_name\n    }\n\n    CATEGORIES {\n        INT id\n        VARCHAR name\n    }\n\n    RECIPES ||--o{ IMAGES : \"has\"\n    RECIPES ||--o{ INSTRUCTIONS : \"has\"\n    RECIPES ||--o{ INGREDIENTS : \"has\"\n    CATEGORIES ||--o{ RECIPES : \"categorizes\"</code></pre>"},{"location":"database/#sqalchemy","title":"SQAlchemy","text":"<ol> <li>Install Required Packages    Ensure you have the <code>mysql-connector-python</code> or <code>pymysql</code> library installed to work with MySQL. Run one of the following commands:</li> </ol> <pre><code>pip install flask-mysql\npip install pymysql\n</code></pre> <p>Or, if you prefer <code>mysqlclient</code> (a C-based MySQL library):</p> <pre><code>pip install mysqlclient\n</code></pre> <ol> <li> <p>Update Your Configuration    Modify the <code>SQLALCHEMY_DATABASE_URI</code> to use a MySQL connection string.</p> </li> <li> <p>Code with MySQL Configuration    Here\u2019s the updated code for MySQL:</p> </li> </ol> <pre><code>import os\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.sql import func\n\n# App and Database Setup\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = (\n    \"mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;/&lt;database_name&gt;\"\n)\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\n# User Model\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False, unique=True)\n    password_hash = db.Column(db.String(255), nullable=False)\n    email = db.Column(db.String(255), unique=True)\n    created_at = db.Column(db.DateTime(timezone=True), server_default=func.now())\n\n    def __repr__(self):\n        return f'&lt;User {self.username}&gt;'\n\n# Category Model\nclass Category(db.Model):\n    __tablename__ = 'categories'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False, unique=True)\n    recipes = db.relationship('Recipe', back_populates='category')\n\n    def __repr__(self):\n        return f'&lt;Category {self.name}&gt;'\n\n# Recipe Model\nclass Recipe(db.Model):\n    __tablename__ = 'recipes'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255), nullable=False)\n    notes = db.Column(db.Text)\n    detail = db.Column(db.Text)\n    image = db.Column(db.String(255))\n    author = db.Column(db.String(100), nullable=False)\n    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'), nullable=True)\n    serves = db.Column(db.Integer, nullable=True)\n    is_favorite = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime(timezone=True), server_default=func.now())\n\n    category = db.relationship('Category', back_populates='recipes')\n    images = db.relationship('Image', back_populates='recipe', cascade='all, delete')\n    instructions = db.relationship('Instruction', back_populates='recipe', cascade='all, delete')\n    ingredients = db.relationship('Ingredient', back_populates='recipe', cascade='all, delete')\n\n    def __repr__(self):\n        return f'&lt;Recipe {self.name}&gt;'\n\n# Image Model\nclass Image(db.Model):\n    __tablename__ = 'images'\n    id = db.Column(db.Integer, primary_key=True)\n    recipe_id = db.Column(db.Integer, db.ForeignKey('recipes.id'), nullable=False)\n    image = db.Column(db.String(255), nullable=False)\n    image_description = db.Column(db.String(255))\n    image_order_number = db.Column(db.Integer, nullable=True)\n\n    recipe = db.relationship('Recipe', back_populates='images')\n\n    def __repr__(self):\n        return f'&lt;Image for Recipe {self.recipe_id}&gt;'\n\n# Instruction Model\nclass Instruction(db.Model):\n    __tablename__ = 'instructions'\n    id = db.Column(db.Integer, primary_key=True)\n    recipe_id = db.Column(db.Integer, db.ForeignKey('recipes.id'), nullable=False)\n    instruction_order = db.Column(db.Integer, nullable=False)\n    instruction_step = db.Column(db.Text, nullable=False)\n\n    recipe = db.relationship('Recipe', back_populates='instructions')\n\n    def __repr__(self):\n        return f'&lt;Instruction {self.instruction_order} for Recipe {self.recipe_id}&gt;'\n\n# Ingredient Model\nclass Ingredient(db.Model):\n    __tablename__ = 'ingredients'\n    id = db.Column(db.Integer, primary_key=True)\n    recipe_id = db.Column(db.Integer, db.ForeignKey('recipes.id'), nullable=False)\n    quantity = db.Column(db.String(100), nullable=False)\n    ingredient_name = db.Column(db.String(255), nullable=False)\n\n    recipe = db.relationship('Recipe', back_populates='ingredients')\n\n    def __repr__(self):\n        return f'&lt;Ingredient {self.ingredient_name} for Recipe {self.recipe_id}&gt;'\n\n# Initialize the database\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n</code></pre>"},{"location":"database/#notes","title":"Notes","text":"<ol> <li>Replace <code>&lt;username&gt;</code>, <code>&lt;password&gt;</code>, <code>&lt;hostname&gt;</code>, and <code>&lt;database_name&gt;</code> in the <code>SQLALCHEMY_DATABASE_URI</code> with your MySQL credentials and database name.</li> <li> <p>Example:      <pre><code>app.config['SQLALCHEMY_DATABASE_URI'] = \"mysql+pymysql://root:password@localhost/recipe_app\"\n</code></pre></p> </li> <li> <p>Create the Database:</p> </li> <li> <p>Log in to MySQL and create the database before running the app:      <pre><code>CREATE DATABASE recipe_app;\n</code></pre></p> </li> <li> <p>Test the Setup:</p> </li> <li>Run the Flask app locally and ensure the tables are created in your MySQL database.</li> <li> <p>Use sample data to test the relationships.</p> </li> <li> <p>PythonAnywhere:</p> </li> <li>Update the <code>SQLALCHEMY_DATABASE_URI</code> for your PythonAnywhere database credentials when deploying.</li> </ol>"},{"location":"project/","title":"Project","text":""},{"location":"project/#recommended-flask-project-structure","title":"Recommended Flask Project Structure","text":"<pre><code>project_name/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py        # App factory and initialization\n\u2502   \u251c\u2500\u2500 models.py          # Your models file (store your SQLAlchemy classes here)\n\u2502   \u251c\u2500\u2500 routes.py          # Define your routes (views/controllers)\n\u2502   \u251c\u2500\u2500 templates/         # HTML templates (e.g., index.html, layout.html)\n\u2502   \u251c\u2500\u2500 static/            # CSS, JS, images, and other static files\n\u2502   \u2514\u2500\u2500 forms.py           # Optional: If using Flask-WTF for forms\n\u2502\n\u251c\u2500\u2500 config.py              # Configuration settings (DB URI, secrets, etc.)\n\u251c\u2500\u2500 requirements.txt       # Python dependencies\n\u251c\u2500\u2500 run.py                 # Main entry point to run the app\n\u2514\u2500\u2500 venv/                  # Your virtual environment (usually not committed)\n</code></pre>"},{"location":"project/#step-by-step-explanation","title":"Step-by-Step Explanation","text":"<ol> <li>Store <code>models.py</code> in the <code>app/</code> Directory    Place all your SQLAlchemy models in a file called <code>models.py</code> inside the <code>app/</code> directory.</li> </ol> <p>File: <code>app/models.py</code> <pre><code>from flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.sql import func\n\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False, unique=True)\n    password_hash = db.Column(db.String(255), nullable=False)\n    email = db.Column(db.String(255), unique=True)\n    created_at = db.Column(db.DateTime(timezone=True), server_default=func.now())\n\n# Add other models here (e.g., Recipe, Category, Image, etc.)\n</code></pre></p> <ol> <li>Initialize Your Database in <code>__init__.py</code>    In the <code>app/__init__.py</code> file, initialize your Flask app and the database.</li> </ol> <p>File: <code>app/__init__.py</code> <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom .models import db\n\ndef create_app():\n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = (\n        \"mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;/&lt;database_name&gt;\"\n    )\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n    db.init_app(app)\n\n    with app.app_context():\n        db.create_all()  # Create tables\n\n    return app\n</code></pre></p> <ol> <li>Define Routes in <code>routes.py</code>    Keep your application logic (routes/views) in a separate file.</li> </ol> <p>File: <code>app/routes.py</code> <pre><code>from flask import render_template, redirect, url_for\nfrom .models import db, User  # Import models as needed\n\n# Example route\n@app.route('/')\ndef index():\n    return \"Welcome to the Recipe App!\"\n</code></pre></p> <ol> <li>Run the App from <code>run.py</code>    Use a <code>run.py</code> file as the entry point to start your Flask application.</li> </ol> <p>File: <code>run.py</code> <pre><code>from app import create_app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre></p> <ol> <li>Configuration in <code>config.py</code> (Optional)    If you have multiple configurations (development, production, etc.), you can centralize them in <code>config.py</code>.</li> </ol> <p>File: <code>config.py</code> <pre><code>class Config:\n    SQLALCHEMY_DATABASE_URI = \"mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;/&lt;database_name&gt;\"\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n</code></pre></p> <p>Update <code>app/__init__.py</code> to use this:    <pre><code>app.config.from_object('config.Config')\n</code></pre></p>"},{"location":"project/#how-to-run-your-project","title":"How to Run Your Project","text":"<ol> <li> <p>Set Up Your Virtual Environment <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install flask flask-sqlalchemy pymysql\n</code></pre></p> </li> <li> <p>Run Your Application <pre><code>python run.py\n</code></pre></p> </li> <li> <p>Access Your App    Visit <code>http://127.0.0.1:5000</code> in your browser.</p> </li> </ol> <p>This setup is modular and scalable, making it easy to add functionality over time. Let me know if you'd like further clarification on any step!</p> <p>Yes, in the project structure I suggested, your <code>app.py</code> would be replaced by <code>run.py</code>, which acts as the main entry point for your application. The actual Flask app creation and initialization logic would move into the <code>app/__init__.py</code> file.</p> <p>Here's how it would look in the updated structure:</p>"},{"location":"project/#new-runpy","title":"New <code>run.py</code>","text":"<p>This replaces your current <code>app.py</code>: <pre><code>from app import create_app\n\n# Create the app instance using the factory function\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre></p>"},{"location":"project/#new-app__init__py","title":"New <code>app/__init__.py</code>","text":"<p>This handles app creation and configuration: <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Initialize the database instance\ndb = SQLAlchemy()\n\ndef create_app():\n    app = Flask(__name__)\n\n    # Configuration (update the URI with your MySQL details)\n    app.config['SQLALCHEMY_DATABASE_URI'] = (\n        \"mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;/&lt;database_name&gt;\"\n    )\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n    # Initialize extensions\n    db.init_app(app)\n\n    # Register blueprints or routes (if needed)\n    from .routes import main\n    app.register_blueprint(main)\n\n    return app\n</code></pre></p>"},{"location":"project/#new-approutespy","title":"New <code>app/routes.py</code>","text":"<p>This separates route definitions from app creation: <pre><code>from flask import Blueprint, render_template\n\n# Create a Blueprint for the main routes\nmain = Blueprint(\"main\", __name__)\n\n@main.route(\"/\")\ndef home():\n    return render_template(\"index.html\")\n</code></pre></p>"},{"location":"project/#why-this-structure","title":"Why This Structure?","text":"<ol> <li>Separation of Concerns: The <code>run.py</code> is purely for running the app, while <code>app/__init__.py</code> is for creating and configuring it.</li> <li>Scalability: This structure supports adding blueprints for modular route management.</li> <li>Reusability: The <code>create_app()</code> function makes it easier to set up the app in different environments (development, testing, production).</li> </ol>"},{"location":"security/","title":"Security","text":""},{"location":"security/#1-install-flask-login","title":"1. Install Flask-Login","text":"<p>Ensure you have Flask-Login installed in your environment: <pre><code>pip install flask-login\n</code></pre></p>"},{"location":"security/#2-set-up-the-users-table","title":"2. Set Up the <code>users</code> Table","text":"<p>Define your <code>users</code> table for storing user credentials. Use <code>password_hash</code> for securely storing passwords.</p> <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(100) NOT NULL UNIQUE,\n    password_hash VARCHAR(255) NOT NULL,\n    email VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"security/#3-configure-flask-login","title":"3. Configure Flask-Login","text":"<p>Set up Flask-Login in your application:</p>"},{"location":"security/#user-model","title":"User Model","text":"<p>Create a user class that works with Flask-Login. It should include a <code>get_id</code> method and inherit <code>UserMixin</code>.</p> <pre><code>from flask_login import UserMixin\n\nclass User(UserMixin):\n    def __init__(self, id, username, password_hash):\n        self.id = id\n        self.username = username\n        self.password_hash = password_hash\n</code></pre>"},{"location":"security/#login-manager","title":"Login Manager","text":"<p>Initialize Flask-Login's <code>LoginManager</code>.</p> <pre><code>from flask import Flask\nfrom flask_login import LoginManager\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"  # Redirect here for @login_required\n</code></pre>"},{"location":"security/#4-implement-user-loader","title":"4. Implement User Loader","text":"<p>Define a function to load a user from the database based on their ID.</p> <pre><code>@login_manager.user_loader\ndef load_user(user_id):\n    # Replace this with a query to fetch the user from your database\n    user = query_user_from_database(user_id)\n    if user:\n        return User(user[\"id\"], user[\"username\"], user[\"password_hash\"])\n    return None\n</code></pre>"},{"location":"security/#5-add-routes-for-login-and-logout","title":"5. Add Routes for Login and Logout","text":"<p>Create routes to handle user login and logout.</p> <pre><code>from flask import request, redirect, url_for, flash, render_template\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import check_password_hash\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n        user = query_user_by_username(username)  # Fetch user from database\n        if user and check_password_hash(user[\"password_hash\"], password):\n            user_obj = User(user[\"id\"], user[\"username\"], user[\"password_hash\"])\n            login_user(user_obj)\n            return redirect(url_for(\"dashboard\"))\n        flash(\"Invalid username or password\")\n    return render_template(\"login.html\")\n\n@app.route(\"/logout\")\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for(\"login\"))\n</code></pre>"},{"location":"security/#6-protect-routes","title":"6. Protect Routes","text":"<p>Use <code>@login_required</code> to secure routes.</p> <pre><code>@app.route(\"/dashboard\")\n@login_required\ndef dashboard():\n    return f\"Welcome {current_user.username}!\"\n</code></pre>"},{"location":"security/#7-test-your-setup","title":"7. Test Your Setup","text":"<ol> <li> <p>Create a test user with a hashed password:    <pre><code>from werkzeug.security import generate_password_hash\nhashed_password = generate_password_hash(\"password123\")\nprint(hashed_password)\n</code></pre></p> </li> <li> <p>Insert the user into the database:    <pre><code>INSERT INTO users (username, password_hash, email) VALUES ('test_user', '&lt;hashed_password&gt;', 'test@example.com');\n</code></pre></p> </li> <li> <p>Start your Flask app and test the login flow.</p> </li> </ol> <p>For a simple setup, you can implement login and logout functionality using Flask-Login without worrying about additional features like password reset or user registration. Here's how you can achieve this:</p>"},{"location":"security/#basic-setup-for-login-and-logout","title":"Basic Setup for Login and Logout","text":""},{"location":"security/#1-database-table-for-users","title":"1. Database Table for Users","text":"<p>Keep your <code>users</code> table simple: <pre><code>CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(100) NOT NULL UNIQUE,\n    password_hash VARCHAR(255) NOT NULL\n);\n</code></pre></p> <p>Manually add your user with a hashed password: <pre><code>from werkzeug.security import generate_password_hash\n\nhashed_password = generate_password_hash(\"your_password\")\nprint(hashed_password)  # Use this hash in your database\n</code></pre></p> <p>Insert the user into the database: <pre><code>INSERT INTO users (username, password_hash) VALUES ('your_username', '&lt;hashed_password&gt;');\n</code></pre></p>"},{"location":"security/#2-flask-login-integration","title":"2. Flask-Login Integration","text":""},{"location":"security/#user-model_1","title":"User Model","text":"<p>Create a <code>User</code> class compatible with Flask-Login: <pre><code>from flask_login import UserMixin\n\nclass User(UserMixin):\n    def __init__(self, id, username, password_hash):\n        self.id = id\n        self.username = username\n        self.password_hash = password_hash\n</code></pre></p>"},{"location":"security/#login-manager_1","title":"Login Manager","text":"<p>Set up the <code>LoginManager</code> to manage sessions: <pre><code>from flask_login import LoginManager\n\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"login\"  # Redirect to login page for @login_required\n</code></pre></p>"},{"location":"security/#user-loader","title":"User Loader","text":"<p>Fetch the user from the database by ID: <pre><code>@login_manager.user_loader\ndef load_user(user_id):\n    # Query the database to get user details\n    user = query_user_from_database(user_id)  # Replace with your database query\n    if user:\n        return User(user[\"id\"], user[\"username\"], user[\"password_hash\"])\n    return None\n</code></pre></p>"},{"location":"security/#3-routes-for-login-and-logout","title":"3. Routes for Login and Logout","text":""},{"location":"security/#login-route","title":"Login Route","text":"<p>Authenticate the user and start a session: <pre><code>from flask import request, redirect, url_for, flash, render_template\nfrom flask_login import login_user\nfrom werkzeug.security import check_password_hash\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n\n        # Query the user from the database\n        user = query_user_by_username(username)  # Replace with your database query\n        if user and check_password_hash(user[\"password_hash\"], password):\n            user_obj = User(user[\"id\"], user[\"username\"], user[\"password_hash\"])\n            login_user(user_obj)\n            return redirect(url_for(\"dashboard\"))\n        flash(\"Invalid username or password\")\n    return render_template(\"login.html\")  # Create a simple login template\n</code></pre></p>"},{"location":"security/#logout-route","title":"Logout Route","text":"<p>End the user session: <pre><code>from flask_login import logout_user\n\n@app.route(\"/logout\")\ndef logout():\n    logout_user()\n    return redirect(url_for(\"login\"))\n</code></pre></p>"},{"location":"security/#4-protect-routes-with-login_required","title":"4. Protect Routes with <code>@login_required</code>","text":"<p>Secure pages that should only be accessible to logged-in users: <pre><code>from flask_login import login_required, current_user\n\n@app.route(\"/dashboard\")\n@login_required\ndef dashboard():\n    return f\"Welcome, {current_user.username}!\"\n</code></pre></p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#files-and-git","title":"Files and git","text":"<p>All files are stored on github in recipes repository</p> <p>files on laptop in dir :Development/recipes-flask</p> <p>in python anywhere rember to do a git pull - restart/refresh to reflect the changes</p>"},{"location":"todo/","title":"Todo","text":""},{"location":"todo/#first-steps","title":"First Steps","text":""},{"location":"todo/#1-initial-setup","title":"1. Initial Setup","text":"<ul> <li>[ ] Install Python and set up a virtual environment.</li> <li>[ ] Install Flask and other required libraries (e.g., <code>flask-mysqldb</code>, <code>mysql-connector-python</code>).</li> <li>[ ] Set up a Git repository for version control.</li> </ul>"},{"location":"todo/#2-database-setup","title":"2. Database Setup","text":"<ul> <li>[ ] Design the database schema for recipes (e.g., tables for users, recipes, ingredients, categories).</li> <li>[ ] Create the MySQL database and tables.</li> <li>[ ] Connect Flask to the database using MySQL.</li> <li>[ ] Add seed data for initial testing (optional).</li> </ul>"},{"location":"todo/#3-flask-app-basic-structure","title":"3. Flask App Basic Structure","text":"<ul> <li>[ ] Create the Flask app structure:</li> <li><code>/static/</code>: For CSS, JS, images.</li> <li><code>/templates/</code>: For HTML templates.</li> <li><code>/app.py</code>: The main application file.</li> <li><code>/config.py</code>: For configuration settings like database credentials.</li> <li>[ ] Set up the <code>app.py</code> with basic routes and configurations.</li> </ul>"},{"location":"todo/#4-templates-and-frontend","title":"4. Templates and Frontend","text":"<ul> <li>[ ] Create a base template (<code>base.html</code>) with a common layout and navigation bar.</li> <li>[ ] Set up a home page template (<code>index.html</code>).</li> <li>[ ] Create templates for:</li> <li>Viewing a single recipe.</li> <li>Adding a new recipe.</li> <li>Editing a recipe.</li> <li>[ ] Add Tailwind CSS for styling.</li> </ul>"},{"location":"todo/#5-routes-and-backend-logic","title":"5. Routes and Backend Logic","text":"<ul> <li>[ ] Set up routes:</li> <li>Home (<code>/</code>): Display a list of recipes.</li> <li>Recipe details (<code>/recipe/&lt;id&gt;</code>): Show detailed recipe information.</li> <li>Add recipe (<code>/recipe/add</code>): Form to add a recipe.</li> <li>Edit recipe (<code>/recipe/edit/&lt;id&gt;</code>): Form to edit a recipe.</li> <li>Delete recipe (<code>/recipe/delete/&lt;id&gt;</code>): Delete a recipe.</li> <li>[ ] Implement backend logic for CRUD operations.</li> </ul>"},{"location":"todo/#6-adding-interactivity","title":"6. Adding Interactivity","text":"<ul> <li>[ ] Include Alpine.js in your templates for interactivity.</li> <li>[ ] Use Alpine.js for:</li> <li>Toggling ingredient lists.</li> <li>Showing/hiding forms.</li> <li>Adding client-side validation feedback.</li> </ul>"},{"location":"todo/#7-user-authentication-optional","title":"7. User Authentication (Optional)","text":"<ul> <li>[ ] Add user login/logout functionality.</li> <li>[ ] Allow users to save favorite recipes or manage their own recipe lists.</li> </ul>"},{"location":"todo/#8-testing-and-debugging","title":"8. Testing and Debugging","text":"<ul> <li>[ ] Test all routes and forms.</li> <li>[ ] Validate database queries and connections.</li> <li>[ ] Use Flask's debug mode to catch and fix errors.</li> </ul>"},{"location":"todo/#9-deployment","title":"9. Deployment","text":"<ul> <li>[ ] Set up the project on PythonAnywhere.</li> <li>[ ] Configure the MySQL database on the server.</li> <li>[ ] Push your code and test the live app.</li> </ul> <p>Would you like help fleshing out specific sections or a more detailed task list for one of these steps?</p>"}]}